Shared Natural prog;
Shared Natural pot_array, pot_elements;

Natural f_shader, v_shader;
Text f_src, v_src;

// ---------------------------
// Create program
// ---------------------------

v_src = "

attribute vec4 vertex;
attribute vec3 normal;

uniform  mat4 model;
uniform  mat4 view;
uniform  mat4 proj;
uniform  vec4 light;
uniform float specular;

varying vec4 cosines;

void main(void) {

    // assume unit normals
    vec4 N = view * model * vec4(normal, 0);
    vec4 L = normalize(view * vec4(light.xyz, 0));
    vec4 V = vec4(normalize((view * model * vertex).xyz), 1);

    cosines = vec4(1, max(0, dot(N,L)), pow(max(0, dot(V, reflect(L, N))), specular), 0);
    gl_Position = proj * view * model * vertex;
}
";

f_src = "
uniform  mat4 material_colors;
uniform  mat4 light_colors;

varying vec4 cosines;

void main(void) {

    mat4 M = matrixCompMult(light_colors, material_colors);
    
    gl_FragColor = M * cosines;
}
";

f_shader = createshader(fragment_shader);
compileshader f_shader, f_src;

v_shader = createshader(vertex_shader);
compileshader v_shader, v_src;

prog = createprogram();
attachshader prog, v_shader;
attachshader prog, f_shader;
linkprogram prog;

// ------------------
// teapot buffers
// ------------------

pot_array = genbuffer();
bindbuffer array_buffer, pot_array;
bufferdata array_buffer, teapot, static_draw;

pot_elements = genbuffer();
bindbuffer element_array_buffer, pot_elements;
bufferdata element_array_buffer, teapot, static_draw;

// ------------------
// program variables
// ------------------

Shared Natural loc_vertex, loc_normal, loc_model, loc_view, loc_proj, loc_light, loc_material_colors, loc_light_colors, loc_specular;

useprogram prog;

loc_model = getuniformlocation(prog, "model");
loc_view = getuniformlocation(prog, "view");
loc_proj = getuniformlocation(prog, "proj");
loc_light = getuniformlocation(prog, "light");
loc_material_colors = getuniformlocation(prog, "material_colors");
loc_light_colors = getuniformlocation(prog, "light_colors");
loc_specular = getuniformlocation(prog, "specular");

loc_vertex = getattriblocation(prog, "vertex");
loc_normal = getattriblocation(prog, "normal");


vertexattribpointer loc_vertex, teapot, "vertex";
vertexattribpointer loc_normal, teapot, "normal";


enablevertexattribarray loc_vertex;
enablevertexattribarray loc_normal;

// ------------------
// other
// ------------------

clearcolor vec(.1,.2,.2,1);
enable depth_test;
enable cull_face;
frontface ccw;
cullface back;
linewidth 2;



