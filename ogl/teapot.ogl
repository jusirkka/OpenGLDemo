From "get locations" import \
     u_m_light_colors, u_s_shininess, u_m_material_colors, \
     u_v_light, u_m_vm, u_m_pvm, u_m_n

From "init textures" import tex_plaid, tex_french
From "" import camera, projection, time

clear color_buffer_bit | depth_buffer_bit

// ------------------
// draw teapots
// ------------------

bindtexture texture_2d, tex_plaid

uniformmatrix4f u_m_light_colors, matcol(vec(.1, .1, .1, 0), vec(.1, .1, .1, 0), vec(.1, .1, .1, 0), vec(0, 0, 0, 0))

//    vec4 N = normalize(view * model * vec4(normal, 0));
//    vec4 L = normalize(view * vec4(light.xyz, 0));
//    vec4 V = vec4(normalize((view * model * vertex).xyz), 1);


uniform1f u_s_shininess, 3
uniformmatrix4f u_m_material_colors, matcol(vec(.1, .1, .1, 0), vec(.1, .1, .1, 0), vec(.2, .2, .2, 0), vec(0, 0, 0, 0))
uniform4f u_v_light, normalize(camera * vec(4, 1, -3, 0))


Var model: Matrix


model = rotation(-80 + 3.0*time, vec(1, 0, 0, 1)) 
uniformmatrix4f u_m_vm, camera * model
uniformmatrix4f u_m_pvm, projection * camera * model
uniformmatrix4f u_m_n, normal_transform(camera * model)

draw modelstore, "teapot", triangles

bindtexture texture_2d, tex_french
uniform1f u_s_shininess, 3.4

uniformmatrix4f u_m_material_colors, matcol(vec(.1, .1, .1, 0), vec(0, .6, 0, 0), vec(.6, .6, .6, 0), vec(0, 0, 0, 0))

model = translation(vec(-10 + 4*sin(time / 50.), 0, 4, 1)) * rotation(180 + 3.0*time, vec(sin(time/30.)*cos(time/40.), sin(time/50.), cos(time/30. + 0.1), 1))
uniformmatrix4f u_m_vm, camera * model
uniformmatrix4f u_m_pvm, projection * camera * model
uniformmatrix4f u_m_n, normal_transform(camera * model)

draw modelstore,  "teapot", triangles
