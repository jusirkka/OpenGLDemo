Var vao: Natural = genvertexarray()
bindvertexarray vao

Var vs, fs:Natural

vs = createshader(vertex_shader)
fs = createshader(fragment_shader)

compileshader fs, source("fragment")
compileshader vs, source("vertex")

Shared Var prog: Natural = createprogram()

attachshader prog, vs
attachshader prog, fs

linkprogram prog

Shared Var u: Record(mv, proj, light: Natural)

u.mv = getuniformlocation(prog, "mv_matrix")
u.proj = getuniformlocation(prog, "proj_matrix")
u.light = getuniformlocation(prog, "light_pos")

Shared Var tex: Record(color, normals: Natural)
activetexture texture0
tex.color = ktx("color")
activetexture texture0 + 1
tex.normals = ktx("normals")

// Model store
Shared Var model_array: Natural = genbuffer()
bindbuffer array_buffer, model_array
bufferextdata array_buffer, modelstore, static_draw

Shared Var model_elements: Natural = genbuffer()
bindbuffer element_array_buffer, model_elements
bufferextdata element_array_buffer, modelstore, static_draw

enablevertexattribarray 0
enablevertexattribarray 1
enablevertexattribarray 4

vertexattribextpointer 0, modelstore, "dod:vertex"
vertexattribextpointer 1, modelstore, "dod:normal"
vertexattribextpointer 4, modelstore, "dod:tex"

enable depth_test
depthfunc lequal
enable cull_face
cullface front
frontface ccw
clearcolor vec(.1,.2,.2,1)
cleardepth 1




